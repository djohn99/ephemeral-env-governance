name: Create Ephemeral Env
on:
  workflow_dispatch:
    inputs:
      base_env:
        type: choice
        options: [env-uat, env-pt, env-sit, env-dev, env-stg]
        default: env-uat
      services_csv:
        description: "Optional comma-separated services (default: all from eks-config/repos/services.txt)"
        required: false
      versions_json:
        description: 'Optional JSON: {"svc":"tag"} â€” leave empty to auto-use latest tags from the most recent "List ECR Tags" run'
        required: false
      ttl_minutes:
        default: "120"
        required: true

jobs:
  pull-latest-tags:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
    outputs:
      versions_json: ${{ steps.build.outputs.versions_json }}
    steps:
      - name: Find latest successful "List ECR Tags" run on this branch
        id: find
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const branch = context.ref.replace("refs/heads/", "");
            const workflow_id = ".github/workflows/list-ecr-tags.yml";
            const res = await github.rest.actions.listWorkflowRuns({
              owner, repo, workflow_id, branch,
              status: "success", per_page: 1
            });
            const run = res.data.workflow_runs[0];
            core.setOutput("run_id", run ? String(run.id) : "");
      - name: Download tags artifact (available-tags)
        if: ${{ steps.find.outputs.run_id != '' }}
        uses: actions/download-artifact@v4
        with:
          name: available-tags
          run-id: ${{ steps.find.outputs.run_id }}
          path: tags_artifact
      - name: Build versions_json from artifact if input empty
        id: build
        run: |
          set -euo pipefail
          INPUT='${{ inputs.versions_json }}'
          if [ -n "$INPUT" ]; then
            echo "versions_json=$INPUT" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ -f "tags_artifact/tags.json" ]; then
            VJSON=$(jq -r 'to_entries | map({(.key): (if .value | length > 0 then .value[0] else "latest" end)}) | add' tags_artifact/tags.json)
            echo "Using versions_json from latest List run:"
            echo "$VJSON"
            echo "versions_json=$VJSON" >> $GITHUB_OUTPUT
          else
            echo "versions_json=" >> $GITHUB_OUTPUT
            echo "No artifact found and no versions_json provided."
          fi

  deploy:
    needs: [pull-latest-tags]
    uses: your-org/ephemeral-env-governance/.github/workflows/create-ephemeral-env.yml@v1.0.0
    with:
      base_env:         ${{ inputs.base_env }}
      services_csv:     ${{ inputs.services_csv }}
      versions_json:    ${{ needs.pull-latest-tags.outputs.versions_json || inputs.versions_json }}
      ttl_minutes:      ${{ inputs.ttl_minutes }}
      eks_cluster_name: "your-eks-cluster-name"
      aws_region:       "eu-west-1"
      ecr_registry:     "123456789012.dkr.ecr.eu-west-1.amazonaws.com"
      eks_config_git_branch: "master"
      resolve_latest:   true
      sync_ecr_secret:  false
      source_namespace_for_ecr_secret: "env-uat"
      patch_default_sa: true
    secrets: inherit
